name: NBA Analytics Backend Tests

on:
  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  
  # Trigger on pushes to main (after merge)
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    # Only run if backend files changed or manually triggered
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test]') || true

    defaults:
      run:
        working-directory: ./backend

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Dependencies
      run: |
        echo "Installing backend dependencies..."
        npm ci
        echo "Dependencies installed successfully"

    - name: Run Linting (if configured)
      run: |
        if npm run lint --if-present; then
          echo "Linting passed"
        else
          echo "No linting configured, skipping"
        fi
      continue-on-error: true

    - name: Run Unit Tests
      run: |
        echo "Running unit tests..."
        npm run test:ci
      env:
        NODE_ENV: test

    - name: Generate Test Coverage Report
      run: |
        echo "Generating detailed coverage report..."
        npm run test:coverage -- --coverageReporters=text-lcov > coverage.lcov

    - name: Upload Coverage to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: backend/coverage/

    - name: Coverage Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read coverage summary if it exists
          try {
            const coveragePath = path.join('backend', 'coverage', 'coverage-summary.json');
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const comment = `## 🧪 Test Coverage Report
              
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 70 ? '✅' : '⚠️'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 70 ? '✅' : '⚠️'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 70 ? '✅' : '⚠️'} |
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 70 ? '✅' : '⚠️'} |
              
              ${total.statements.pct >= 70 ? '🎉 Great coverage!' : '📈 Consider adding more tests to reach 70% coverage'}
              
              View detailed report in the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not read coverage summary:', error.message);
          }

    - name: Check Coverage Threshold
      run: |
        echo "Checking minimum coverage requirements..."
        
        # Set minimum coverage thresholds
        MIN_COVERAGE=60
        
        # Extract coverage percentage (you may need to adjust this based on your output format)
        COVERAGE=$(npm run test:coverage --silent | grep "All files" | awk '{print $2}' | sed 's/%//')
        
        echo "Current coverage: ${COVERAGE}%"
        echo "Minimum required: ${MIN_COVERAGE}%"
        
        if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below minimum threshold of $MIN_COVERAGE%"
          echo "Please add more tests before merging"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets minimum threshold of $MIN_COVERAGE%"
        fi
      continue-on-error: false

    - name: Test Summary
      if: always()
      run: |
        echo "## 📋 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Version**: ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Working Directory**: ./backend" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests failed - merge blocked**" >> $GITHUB_STEP_SUMMARY
        fi

  # Optional: Slack/Discord notification on failure
  notify-on-failure:
    name: Notify on Test Failure
    runs-on: ubuntu-latest
    needs: test
    if: failure() && github.event_name == 'pull_request'
    
    steps:
    - name: Notify Test Failure
      run: |
        echo "Tests failed for PR #${{ github.event.number }}"
        echo "Branch: ${{ github.head_ref }}"
        echo "Author: ${{ github.event.pull_request.user.login }}"
        # Add Slack/Discord webhook here if needed