version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: nba_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev  # Use dev dockerfile for development
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=nba_analytics
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-secret-key-change-in-production
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Database setup service - run once to initialize
  backend-setup:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=nba_analytics
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your-secret-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    profiles:
      - setup
    command: npm run setup-db

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev  # Use dev dockerfile for development
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_APP_NAME=NBA Analytics Dashboard
      - CHOKIDAR_USEPOLLING=true  # Enable hot reload in Docker
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    stdin_open: true  # Needed for React dev server
    tty: true

  etl:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    env_file:
      - ./data-pipeline/docker.env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data-pipeline:/app
    profiles:
      - etl  # Run with: docker-compose --profile etl up etl
    # Override default command for different operations
    # docker-compose --profile etl run etl python nba_pipeline.py setup
    # docker-compose --profile etl run etl python nba_pipeline.py load 2025-01-15

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - monitoring

volumes:
  postgres_data:
  grafana_data: